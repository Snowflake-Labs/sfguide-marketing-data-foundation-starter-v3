import 'reflect-metadata';
import { Container } from 'inversify';
import { TYPES } from 'ioc/types';
import { IContainerService } from 'interfaces/IContainerService';
import { ContainerService } from 'services/container.service';
import { IRequestsService } from 'interfaces/IRequestsService';
import { RequestsService } from 'services/requests.service';
import { SnowflakeService } from 'services/snowflake.service';
import { ISnowflakeService } from 'interfaces/ISnowflakeService';
import { IMappingService } from 'interfaces/IMappingService';
import { MappingService } from 'services/mapping.service';
import { IDataExplorerService } from 'interfaces/IDataExplorerService';
import { DataExplorerService } from 'services/data_explorer.service';
import { IDatabaseService } from 'interfaces/IDatabaseService';
import { DatabaseService } from 'services/database.service';
import { DataSourcesService } from 'services/data.sources.service';
import { IDataSourcesService } from 'interfaces/IDataSourcesService';
import { IPubSubService } from 'interfaces/IPubSubService';
import { PubSubService } from 'services/pubsub.service';
import { IAiAssistantService } from 'interfaces/IAiAssistantService';
import { AiAssistantService } from 'services/aiassistant.service';

export const container = new Container();
container.bind<IRequestsService>(TYPES.IRequestsService).to(RequestsService).inSingletonScope();
container.bind<IContainerService>(TYPES.IContainerService).to(ContainerService).inSingletonScope();
container.bind<ISnowflakeService>(TYPES.ISnowflakeService).to(SnowflakeService).inSingletonScope();
container.bind<IMappingService>(TYPES.IMappingService).to(MappingService).inSingletonScope();
container.bind<IDataExplorerService>(TYPES.IDataExplorerService).to(DataExplorerService).inSingletonScope();
container.bind<IDatabaseService>(TYPES.IDatabaseService).to(DatabaseService).inSingletonScope();
container.bind<IDataSourcesService>(TYPES.IDataSources).to(DataSourcesService).inSingletonScope();
container.bind<IPubSubService>(TYPES.IPubSubService).to(PubSubService).inSingletonScope();
container.bind<IAiAssistantService>(TYPES.IAiAssistantService).to(AiAssistantService).inSingletonScope();